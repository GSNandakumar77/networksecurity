name: CI-CD Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository" # replace with flake8 or pylint

      - name: Run unit tests
        run: echo "Running unit tests" # replace with pytest or unittest

  build-and-push-ecr-image:
    name: Continuous Delivery - Build & Push
    needs: integration
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.expose.outputs.image }}   # expose at job level
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Job-level outputs must be written by a step and then mapped above
      - name: Expose image output
        id: expose
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  deploy:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Debug image value
        run: |
          echo "Image from build job: ${{ needs.build-and-push-ecr-image.outputs.image }}"

      - name: Clean old Docker containers & images
        run: |
          docker stop networksecurity && docker rm -fv networksecurity || true
          docker system prune -af
          docker volume prune -f

      - name: Pull latest image
        env:
          IMAGE: ${{ needs.build-and-push-ecr-image.outputs.image }}
        run: |
          set -euo pipefail
          if [ -z "${IMAGE:-}" ]; then
            echo "ERROR: IMAGE is empty; check previous job outputs" >&2
            exit 1
          fi
          docker pull "$IMAGE"

      - name: Run Docker Image
        env:
          IMAGE: ${{ needs.build-and-push-ecr-image.outputs.image }}
        run: |
          docker run -d \
            -p 8080:8080 \
            --ipc="host" \
            --name=networksecurity \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e MONGODB_URL_KEY=${{ secrets.MONGODB_URL_KEY }} \
            "$IMAGE"

      - name: Verify app is running
        run: |
          sleep 5
          curl -f http://localhost:8080/docs || (echo "App failed to start" && exit 1)
